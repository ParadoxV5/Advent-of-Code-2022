type list[E] = Array[E]
type nilable_list[E] = list[E?]
type non_neg_int = Integer

class Blueprint
  attr_reader matrix: list[nilable_list[non_neg_int]]
  attr_reader max_consumption: nilable_list[non_neg_int]
  def initialize: (list[nilable_list[non_neg_int]] matrix) -> void
end

class SaveState[B < Blueprint]
  attr_reader blueprint: B
  attr_reader robots: list[non_neg_int]
  attr_reader resources: list[Integer]
  attr_reader time: Integer
  attr_reader resources_at: Hash[Integer, list[Integer]]
  def initialize: (
    B blueprint,
    ?list[non_neg_int] robots,
    ?list[non_neg_int] resources,
    ?Integer time
  ) -> void
  
  private def non_neg_ceildiv:
    (non_neg_int required, non_neg_int current, non_neg_int rate) -> non_neg_int
  
  def build_time: (non_neg_int index) -> non_neg_int?
  def next_states:
    (max_time: Integer?) ?{ (instance new_state) -> boolish } -> Array[instance]
  def states_at:
    (Integer max_time) ?{ (instance new_state) -> boolish } -> Array[instance]
end

class Day19Blueprint < Blueprint
  attr_reader id: Integer
  def initialize: (String string) -> void
end

class Day19SaveState < SaveState[Day19Blueprint]
  def geodes: () -> Integer

  def max_geodes_at: (Integer max_time) -> Integer
end
